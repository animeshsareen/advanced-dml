
-- Starting with some basic SELECT queries
-- Read the syntax and predict what the output will be!

-- working with functions in SELECT
SELECT
    COUNT(*)  AS count_of_student,
    MIN(cgpa) AS min_student_cgpa,
    MAX(cgpa) AS max_student_cgpa
FROM
    student;
    
--using JOIN with aliases
SELECT
    t.last_name,
    c.course_code,
    COUNT(sc.section_id) AS number_of_classes
FROM
         section sc
    JOIN teacher t ON t.uteid = sc.instructor_uteid
    JOIN course  c ON sc.course_id = c.course_id
WHERE
        semester_code = 'FA22'
    AND substr(c.course_code, 1, 3) IN ( 'ACC', 'MIS' )
GROUP BY
    t.last_name,
    c.course_code
ORDER BY
    1,
    2;

/* 
This is a decently advanced query, as it uses some aggregate functions (AVG)
To execute, we did a multi-join and used GROUP BY to ensure SQL knew what to aggregate 
*/

SELECT
    m.major_code,
    s.classification,
    round(AVG(s.cgpa),
          2) AS average_cgpa
FROM
         student s
    JOIN major_student_linking msl ON s.uteid = msl.uteid
    JOIN major                 m ON msl.major_id = m.major_id
GROUP BY
    m.major_code,
    s.classification
ORDER BY
    AVG(s.cgpa) DESC;



/* 
The rest of these are relatively advanced SELECT queries, 
but they're great as reference points to keep your DML skills sharp
*/

SELECT
    s.primary_college_code AS "College Code",
    first_name
    || ' '
    || last_name           AS "Name",
    COUNT(e.uteid)         AS number_of_course
FROM
         student s
    JOIN enrollment e ON s.uteid = e.uteid
    JOIN section    sc ON e.section_id = sc.section_id
WHERE
    sc.section_day IN ( 'M', 'W', 'MW' )
    AND sc.semester_code = 'FA22'
GROUP BY
    s.first_name
    || ' '
    || s.last_name,
    s.primary_college_code
ORDER BY
    1,
    2;

 SELECT
            s.primary_college_code AS "College Code",
            first_name
            || ' '
            || last_name           AS "Name",
            COUNT(e.uteid)         AS number_of_course
        FROM
                 student s
            JOIN enrollment e ON s.uteid = e.uteid
            JOIN section    sc ON e.section_id = sc.section_id
        WHERE
            sc.section_day IN ( 'M', 'W', 'MW' )
            AND sc.semester_code = 'FA22'
        GROUP BY
            s.first_name
            || ' '
            || s.last_name,
            s.primary_college_code
            HAVING COUNT(e.uteid)>1
        ORDER BY
            1 ASC,
            2 ASC;

SELECT
    a.city            AS home_city,
    a.zip_postal_code AS home_zip_code,
    COUNT(sal.uteid)    AS number_of_students
FROM
         student_address_linking sal
    JOIN address a ON sal.address_id = a.address_id
    JOIN student s ON sal.uteid = s.uteid
WHERE
    city NOT IN ( 'New Delhi', 'Beijing' )
    AND address_type_code = 'H'
GROUP BY
    rollup(city,
           zip_postal_code)
ORDER BY
    1;

/* 

ROLLUP vs CUBE: what's the difference?

CUBE returns subtotals for all column permutations, while rollup 
only computes hierarchical subtotals as we "rollup" into a grand sum (ex. city -> zip); 

CUBE is often useful in business contexts (ex. analyzing global iPhone sales) 
since it'll show crosstabular subtotals across dimensions 
â€”  i.e. city, country, model, AND city + country, city + model, country + model... so on. 

*/


SELECT
    m.major_code,
    COUNT(msl.uteid) AS number_students
FROM
         student s
    JOIN major_student_linking msl ON s.uteid = msl.uteid
    JOIN major                 m ON msl.major_id = m.major_id
WHERE
    s.international_flag = 'N'
GROUP BY
    m.major_code
HAVING
    COUNT(msl.uteid) > 1
ORDER BY
    2 DESC;


--practicing with NOT operator
SELECT
    s.uteid
FROM
    student s
WHERE
    s.uteid NOT IN (
        SELECT DISTINCT
            msl.uteid
        FROM
            major_student_linking msl
    );

SELECT DISTINCT
    s.uteid,
    m.uteid,
    date_declared
FROM
    student               s
    LEFT JOIN major_student_linking m ON s.uteid = m.uteid
WHERE
    m.uteid IS NULL;
    
SELECT
    s.first_name,
    s.last_name,
    s.email,
    s.cgpa                                      AS cgpa,
    round((sysdate - s.date_of_birth) / 365, 0) AS age
FROM
    student s
WHERE
    s.cgpa > (
        SELECT
            AVG(cgpa)
        FROM
            student
    )
ORDER BY
    5 ASC,
    4 DESC;

SELECT
    iv.uteid,
    iv.number_of_sections,
    iv.total_minutes,
    round(total_minutes / number_of_sections, 1) AS avg_minutes_per_section
FROM
    (
        SELECT
            e.uteid,
            COUNT(e.section_id)    AS number_of_sections,
            SUM(sc.length_minutes) AS total_minutes
        FROM
            enrollment e
            LEFT JOIN section    sc ON e.section_id = sc.section_id
        GROUP BY
            uteid
    ) iv
ORDER BY
    avg_minutes_per_section;
    
SELECT
    uteid,
    first_name,
    last_name,
    primary_dept,
    office_phone
FROM
    teacher
WHERE
        uteid IN (
        SELECT DISTINCT
            instructor_uteid
        FROM
            section
        WHERE
            section_day = ANY ( 'M', 'W', 'MW', 'MWF' )
    )
    OR primary_dept = 'COE'
ORDER BY
    4,
    2;

SELECT
    s.first_name,
    s.last_name,
    s.email,
    s.classification,
    s.cgpa,
    iv.total_section
FROM
         student s
    JOIN (
        SELECT
            uteid,
            COUNT(uteid) AS total_section
        FROM
            enrollment
        GROUP BY
            uteid
    ) iv ON s.uteid = iv.uteid
WHERE
        classification = 4
    AND cgpa < 2.5
ORDER BY
    5,
    6;

